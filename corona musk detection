import cv2
import numpy as np
import random
from tensorflow.keras.models import load_model

# Load the pre-trained mask detection model
model = load_model('mask_detector_model.h5')  # Replace with your actual model file
labels = ['Mask', 'No Mask']

# Load Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

def get_temperature():
    # Mock temperature function – replace with real sensor reading for Raspberry Pi (MLX90614)
    return round(random.uniform(36.0, 39.0), 2)

# Start webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Convert to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)

    for (x, y, w, h) in faces:
        face_img = frame[y:y+h, x:x+w]
        face_img = cv2.resize(face_img, (150, 150))
        face_img = face_img.astype("float32") / 255.0
        face_img = np.expand_dims(face_img, axis=0)

        # Predict mask or no mask
        pred = model.predict(face_img)[0]
        class_id = np.argmax(pred)
        label = labels[class_id]
        color = (0, 255, 0) if label == "Mask" else (0, 0, 255)

        # Simulate temperature
        temperature = get_temperature()
        temp_status = "Normal" if temperature <= 37.5 else "High"

        # Display results
        cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)
        cv2.putText(frame, f"{label}, Temp: {temperature}°C ({temp_status})", (x, y-10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    cv2.imshow("Mask & Temperature Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
